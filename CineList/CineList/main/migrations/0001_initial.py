# Generated by Django 2.1.7 on 2019-03-19 20:18

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
import django.contrib.postgres.fields
import django.contrib.postgres.fields.jsonb
import django.core.serializers.json
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import main.models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False,
                                                     help_text='Designates that this user has all permissions without explicitly assigning them.',
                                                     verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                              help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                              max_length=150, unique=True,
                                              validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                                              verbose_name='username')),
                ('is_staff', models.BooleanField(default=False,
                                                 help_text='Designates whether the user can log into this admin site.',
                                                 verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True,
                                                  help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.',
                                                  verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('email', models.EmailField(blank=True, max_length=254)),
                ('phone_number', models.CharField(blank=True, max_length=10)),
                ('friends_list',
                 models.ManyToManyField(related_name='_user_friends_list_+', to=settings.AUTH_USER_MODEL)),
                ('groups', models.ManyToManyField(blank=True,
                                                  help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.',
                                                  related_name='user_set', related_query_name='user', to='auth.Group',
                                                  verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.',
                                                            related_name='user_set', related_query_name='user',
                                                            to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='FriendRequest',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(choices=[('S', 'Sent'), ('A', 'Accepted'), ('C', 'Canceled')], default='S',
                                            max_length=2)),
                ('receiver',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('sender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sender',
                                             to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tmdb_id', models.IntegerField()),
                ('name', models.CharField(max_length=250)),
            ],
        ),
        migrations.CreateModel(
            name='Movie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=128)),
                ('tmdbId', models.IntegerField()),
                ('releaseDate', models.DateField()),
                ('runtime', models.DurationField()),
                ('description', models.CharField(max_length=8192)),
                ('imageLink', models.CharField(max_length=64)),
                ('tmdbLink', models.CharField(max_length=64)),
                ('budget', models.IntegerField()),
                ('revenue', models.IntegerField()),
                ('rating', models.CharField(max_length=8)),
                ('genres',
                 django.contrib.postgres.fields.ArrayField(base_field=models.CharField(blank=True, max_length=250),
                                                           size=None)),
                ('status', models.IntegerField(choices=[(1, 'In libary'), (2, 'Borrowed'), (3, 'Overdue')], default=1)),
                ('format',
                 models.CharField(choices=[('V', 'VHS Tape'), ('D', 'DVD'), ('B', 'Blu-ray'), ('K', '4K UHD')],
                                  default='D', max_length=2)),
                ('condition',
                 django.contrib.postgres.fields.jsonb.JSONField(default=main.models.Movie.defaultConditions,
                                                                encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('preferences',
                 django.contrib.postgres.fields.jsonb.JSONField(default=main.models.Movie.defaultPreferences,
                                                                encoder=django.core.serializers.json.DjangoJSONEncoder)),
                ('user', models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE,
                                           to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
